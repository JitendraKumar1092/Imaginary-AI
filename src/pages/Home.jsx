// import React, { useState, useEffect } from "react";
// import { Card, Loader, Loader2, FormField } from "../copmonents";
// import { Search } from "lucide-react";
// import { SiteFooter } from "../copmonents/Footer";

// const RenderCards = ({ data, title }) => {
//   if (data?.length > 0) {
//     return data.map((post) => <Card key={post._id} {...post} />);
//   }

//   return (
//     <h2 className="mt-5 font-bold text-[#6449ff] text-xl uppercase">{title}</h2>
//   );
// };
// // ehats it

// const Home = () => {
//   const [loading, setLoading] = useState(false);
//   const [allPosts, setAllPosts] = useState(null);
//   const [searchText, setsearchText] = useState("");
//   const [searchedResults, setSearchedResults] = useState(null);
//   const [searchTimeout, setSearchTimeout] = useState(null);

//   useEffect(() => {
//     const fetchPosts = async () => {
//       setLoading(true);

//       try {
//         const response = await fetch(
//           "https://server-imaginary.vercel.app/api/v1/post",
//           {
//             method: "GET",
//             headers: {
//               "Content-Type": "application/json",
//             },
//           }
//         );

//         if (response.ok) {
//           const result = await response.json();

//           setAllPosts(result.data.slice(-5).reverse());
//         }
//       } catch (error) {
//         alert(error);
//       } finally {
//         setLoading(false);
//       }
//     };

//     fetchPosts();
//   }, []);
//   // debouncing seekh rha
//   const handleSearchChange = (e) => {
//     clearTimeout(searchTimeout);

//     setsearchText(e.target.value);
//     setSearchTimeout(
//       setTimeout(() => {
//         const searchResult = allPosts.filter(
//           (item) =>
//             item.name.toLowerCase().includes(searchText.toLowerCase()) ||
//             item.prompt.toLowerCase().includes(searchText.toLowerCase())
//         );
//         setSearchedResults(searchResult);
//       }, 500)
//     );
//   };

//   return (
//     <section className="max-w-7xl mx-auto bg-[#14141r] p-5 rounded-lg shadow-md mt-5 from-neutral-200 to-neutral-800 bg-clip-text">
//       <div>
//         <h1 className="mt-4 font-heading text-4xl font-bold animate-in slide-in-from-bottom-1/2 zoom-in-50 text-center [text-shadow:_0_4px_0_#e1e1e1]  bg-clip-text bg-gradient-to-br from-foreground to-gray-500  text-transparent dark:[text-shadow:none] md:text-5xl lg:text-6xl xl:text-7xl duration-500 fade-in-2">
//           The Community Showcase
//         </h1>

//         <p className="font-medium md:max-w-lg text-center mx-auto mt-3 text-gray-400 md:text-lg animate-in duration-500 zoom-in-50 fade-in-0">
//           Browse through a collection of imaginative and visually stunning
//           images generated by Imaginary.
//         </p>
//       </div>
//       <div className="flex items-center justify-center ">
//         <div className=" m-10 relative w-full max-w-lg animate-in zoom-in-50 fade-in-25 [animation-duration:500ms]">
//           <FormField
//             labelName="Search posts"
//             type="text"
//             name="text"
//             placeholder="Search posts"
//             value={searchText}
//             handleChange={handleSearchChange}
//             className="shadow-sm hover:shadow-md transition-shadow rounded-full pl-10 h-12 "
//           />
//           <Search className="absolute right-3  bottom-3 inset-y-0 my-auto h-5 w-5 text-muted-foreground" />
//         </div>
//       </div>
//       <div className="mt-10">
//         {loading ? (
//           <div className="flex justify-center items-center">
//             <Loader2 className="loader" />
//           </div>
//         ) : (
//           <>
//             {searchText && (
//               <h2 className="text-xl font-medium text-gray-600 mb-3">
//                 Showing result for{" "}
//                 <span className="text-gray-800">{searchText}</span>
//               </h2>
//             )}
//             <div className=" m-10 p-10 grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-10 border-1 border-solid">
//               {searchText ? (
//                 <RenderCards
//                   data={searchedResults}
//                   title="No search results found"
//                   className="card"
//                 />
//               ) : (
//                 <RenderCards
//                   data={allPosts}
//                   title="No posts found"
//                   className="card"
//                 />
//               )}
//             </div>
//           </>
//         )}
//         <SiteFooter />
//       </div>
//     </section>
//   );
// };

// export default Home;
import React, { useState, useEffect } from "react";
import { Card, Loader, Loader2, FormField } from "../copmonents";
import { Search } from "lucide-react";
import { SiteFooter } from "../copmonents/Footer";
import { Link } from "react-router-dom";

const RenderCards = ({ data, title }) => {
  if (data?.length > 0) {
    return data.map((post) => <Card key={post._id} {...post} />);
  }

  return (
    <h2 className="mt-5 font-bold text-[#6449ff] text-xl uppercase">{title}</h2>
  );
};
// ehats it

const Home = () => {
  const [loading, setLoading] = useState(false);
  const [allPosts, setAllPosts] = useState(null);
  const [searchText, setsearchText] = useState("");
  const [searchedResults, setSearchedResults] = useState(null);
  const [searchTimeout, setSearchTimeout] = useState(null);
  const [isModalOpen, setModalOpen] = useState(false);

  useEffect(() => {
    const fetchPosts = async () => {
      setLoading(true);

      try {
        const response = await fetch(
          "https://server-imaginary.vercel.app/api/v1/post",
          {
            method: "GET",
            headers: {
              "Content-Type": "application/json",
            },
          }
        );

        if (response.ok) {
          const result = await response.json();

          setAllPosts(result.data.slice(-5).reverse());
        }
      } catch (error) {
        alert(error);
      } finally {
        setLoading(false);
      }
    };

    fetchPosts();
  }, []);
  // debouncing seekh rha
  const handleSearchChange = (e) => {
    clearTimeout(searchTimeout);

    setsearchText(e.target.value);
    setSearchTimeout(
      setTimeout(() => {
        const searchResult = allPosts.filter(
          (item) =>
            item.name.toLowerCase().includes(searchText.toLowerCase()) ||
            item.prompt.toLowerCase().includes(searchText.toLowerCase())
        );
        setSearchedResults(searchResult);
      }, 500)
    );
  };

  return (
    <section className="max-w-7xl mx-auto bg-[#14141r] md:p-5 rounded-lg shadow-md mt-5 from-neutral-200 to-neutral-800 bg-clip-text">
      <div>
        <h1 className="mt-4 font-heading text-4xl font-bold animate-in slide-in-from-bottom-1/2 zoom-in-50 text-center [text-shadow:0_4px_0#e1e1e1]  bg-clip-text bg-gradient-to-br from-foreground to-gray-500  text-transparent dark:[text-shadow:none] md:text-5xl lg:text-6xl xl:text-7xl duration-500 fade-in-2">
          The Community Showcase
        </h1>

        <p className="font-medium md:max-w-lg text-center mx-auto mt-3 text-gray-400 md:text-lg animate-in duration-500 zoom-in-50 fade-in-0">
          Browse through a collection of imaginative and visually stunning
          images generated by Imaginary.
        </p>
      </div>

      <div className="lg:hidden flex justify-center items-center my-5">
        <Link
          to="/create-post"
          className="bg-white hover:from-blue-600 hover:to-blue-800 text-black font-bold p-3 rounded-full shadow-lg transform transition-all duration-500 ease-in-out hover:scale-110 hover:brightness-110 hover:animate-pulse active:animate-bounce mr-6"
        >
          Create Image
        </Link>
        <Link
          onClick={() => setModalOpen(true)}
          className="bg-[#1c1c1c] border border-white hover:from-blue-600 hover:to-blue-800 text-white font-bold p-3 rounded-full shadow-lg transform transition-all duration-500 ease-in-out hover:scale-110 hover:brightness-110 hover:animate-pulse active:animate-bounce mr-6 "
        >
          Create Video
        </Link>

        {/* Modal */}
        {isModalOpen && (
          <div className="fixed inset-0 flex items-center justify-center z-50 ">
            <div className=" bg-white bg-opacity-0 p-8 rounded-2xl backdrop-blur-3xl">
              <p className="text-lg font-medium mb-4">Coming Soon!</p>
              <p>This feature is currently under development.</p>
              <div className="w-30 h-30">
                <Loader2 />
              </div>
              <button
                onClick={() => setModalOpen(false)}
                className="mt-4 text-[#1c1c1c] bg-white px-4 py-2 rounded-md"
              >
                Close
              </button>
            </div>
          </div>
        )}
      </div>

      <div className="flex items-center justify-center">
        <div className="md:m-10 m-5 relative w-full max-w-lg animate-in zoom-in-50 fade-in-25 [animation-duration:500ms]">
          <FormField
            labelName="Search posts"
            type="text"
            name="text"
            placeholder="Search posts"
            value={searchText}
            handleChange={handleSearchChange}
            className="shadow-sm hover:shadow-md transition-shadow rounded-full pl-10 h-12 "
          />
          <Search className="absolute right-3  bottom-3 inset-y-0 my-auto h-5 w-5 text-muted-foreground" />
        </div>
      </div>
      <div className="mt-10">
        {loading ? (
          <div className="flex justify-center items-center">
            <Loader2 className="loader" />
          </div>
        ) : (
          <>
            {searchText && (
              <h2 className="text-xl font-medium text-gray-600 mb-3">
                Showing result for{" "}
                <span className="text-gray-800">{searchText}</span>
              </h2>
            )}
            <div className=" m-10 p-10 grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-20 border-1 border-solid">
              {searchText ? (
                <RenderCards
                  data={searchedResults}
                  title="No search results found"
                  className="card"
                />
              ) : (
                <RenderCards
                  data={allPosts}
                  title="No posts found"
                  className="card"
                />
              )}
            </div>
          </>
        )}
        <SiteFooter />
      </div>
    </section>
  );
};

export default Home;
